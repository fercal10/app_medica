// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/cita.dart';
import 'models/consulta.dart';
import 'models/pacientes.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7757319827697489290),
      name: 'Cita',
      lastPropertyId: const IdUid(4, 4697887990949968602),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1963588222913367581),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4206950246316895722),
            name: 'comentario',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2215689326053895248),
            name: 'pacienteId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 3314253015589066474),
            relationTarget: 'Paciente'),
        ModelProperty(
            id: const IdUid(4, 4697887990949968602),
            name: 'fecha',
            type: 12,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 7709307179620270703),
      name: 'Consulta',
      lastPropertyId: const IdUid(8, 6453429053291277814),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 469279858068553856),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1707399692121547709),
            name: 'motivo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2650047778352617029),
            name: 'efermedadActual',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5019322202663308587),
            name: 'diganostico',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2900991903881254200),
            name: 'indicaciones',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6659211114962231793),
            name: 'tratamiento',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4855628594462975776),
            name: 'pacienteId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 7589664428840973352),
            relationTarget: 'Paciente'),
        ModelProperty(
            id: const IdUid(8, 6453429053291277814),
            name: 'fecha',
            type: 12,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 6255118462470147490),
      name: 'Paciente',
      lastPropertyId: const IdUid(9, 6709343767120663400),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 832374907168106102),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3923872012515556377),
            name: 'nombre',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3613998360576638566),
            name: 'apellido',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6811303856593418142),
            name: 'telefono',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7020942170749656252),
            name: 'direccion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8163752579683679808),
            name: 'sexo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6709096979640701031),
            name: 'ocupacion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4247625926955675919),
            name: 'cedula',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6709343767120663400),
            name: 'fechaNacimiento',
            type: 12,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'consultas', srcEntity: 'Consulta', srcField: ''),
        ModelBacklink(name: 'citas', srcEntity: 'Cita', srcField: '')
      ])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 6255118462470147490),
      lastIndexId: const IdUid(2, 7589664428840973352),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Cita: EntityDefinition<Cita>(
        model: _entities[0],
        toOneRelations: (Cita object) => [object.paciente],
        toManyRelations: (Cita object) => {},
        getId: (Cita object) => object.id,
        setId: (Cita object, int id) {
          object.id = id;
        },
        objectToFB: (Cita object, fb.Builder fbb) {
          final comentarioOffset = fbb.writeString(object.comentario);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, comentarioOffset);
          fbb.addInt64(2, object.paciente.targetId);
          fbb.addInt64(
              3,
              object.fecha == null
                  ? null
                  : object.fecha!.microsecondsSinceEpoch * 1000);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final fechaValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = Cita(
              fecha: fechaValue == null
                  ? null
                  : DateTime.fromMicrosecondsSinceEpoch(
                      (fechaValue / 1000).round()),
              comentario: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.paciente.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.paciente.attach(store);
          return object;
        }),
    Consulta: EntityDefinition<Consulta>(
        model: _entities[1],
        toOneRelations: (Consulta object) => [object.paciente],
        toManyRelations: (Consulta object) => {},
        getId: (Consulta object) => object.id,
        setId: (Consulta object, int id) {
          object.id = id;
        },
        objectToFB: (Consulta object, fb.Builder fbb) {
          final motivoOffset = fbb.writeString(object.motivo);
          final efermedadActualOffset = fbb.writeString(object.efermedadActual);
          final diganosticoOffset = fbb.writeString(object.diganostico);
          final indicacionesOffset = fbb.writeString(object.indicaciones);
          final tratamientoOffset = fbb.writeList(
              object.tratamiento.map(fbb.writeString).toList(growable: false));
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, motivoOffset);
          fbb.addOffset(2, efermedadActualOffset);
          fbb.addOffset(3, diganosticoOffset);
          fbb.addOffset(4, indicacionesOffset);
          fbb.addOffset(5, tratamientoOffset);
          fbb.addInt64(6, object.paciente.targetId);
          fbb.addInt64(
              7,
              object.fecha == null
                  ? null
                  : object.fecha!.microsecondsSinceEpoch * 1000);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final fechaValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final object = Consulta(
              motivo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              efermedadActual: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              diganostico: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              fecha: fechaValue == null
                  ? null
                  : DateTime.fromMicrosecondsSinceEpoch(
                      (fechaValue / 1000).round()),
              indicaciones: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              tratamiento: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 14, []))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.paciente.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.paciente.attach(store);
          return object;
        }),
    Paciente: EntityDefinition<Paciente>(
        model: _entities[2],
        toOneRelations: (Paciente object) => [],
        toManyRelations: (Paciente object) => {
              RelInfo<Consulta>.toOneBacklink(
                      7, object.id, (Consulta srcObject) => srcObject.paciente):
                  object.consultas,
              RelInfo<Cita>.toOneBacklink(
                      3, object.id, (Cita srcObject) => srcObject.paciente):
                  object.citas
            },
        getId: (Paciente object) => object.id,
        setId: (Paciente object, int id) {
          object.id = id;
        },
        objectToFB: (Paciente object, fb.Builder fbb) {
          final nombreOffset = fbb.writeString(object.nombre);
          final apellidoOffset = fbb.writeString(object.apellido);
          final telefonoOffset = fbb.writeString(object.telefono);
          final direccionOffset = fbb.writeString(object.direccion);
          final sexoOffset = fbb.writeString(object.sexo);
          final ocupacionOffset = fbb.writeString(object.ocupacion);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nombreOffset);
          fbb.addOffset(2, apellidoOffset);
          fbb.addOffset(3, telefonoOffset);
          fbb.addOffset(4, direccionOffset);
          fbb.addOffset(5, sexoOffset);
          fbb.addOffset(6, ocupacionOffset);
          fbb.addInt64(7, object.cedula);
          fbb.addInt64(8, object.fechaNacimiento.microsecondsSinceEpoch * 1000);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Paciente(
              nombre: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              apellido: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              cedula:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              telefono: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              direccion: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              fechaNacimiento: DateTime.fromMicrosecondsSinceEpoch(
                  (const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0) /
                          1000)
                      .round()),
              sexo: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 14, ''),
              ocupacion: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 16, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo<Paciente>(
              object.consultas,
              store,
              RelInfo<Consulta>.toOneBacklink(
                  7, object.id, (Consulta srcObject) => srcObject.paciente));
          InternalToManyAccess.setRelInfo<Paciente>(
              object.citas,
              store,
              RelInfo<Cita>.toOneBacklink(
                  3, object.id, (Cita srcObject) => srcObject.paciente));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Cita] entity fields to define ObjectBox queries.
class Cita_ {
  /// see [Cita.id]
  static final id = QueryIntegerProperty<Cita>(_entities[0].properties[0]);

  /// see [Cita.comentario]
  static final comentario =
      QueryStringProperty<Cita>(_entities[0].properties[1]);

  /// see [Cita.paciente]
  static final paciente =
      QueryRelationToOne<Cita, Paciente>(_entities[0].properties[2]);

  /// see [Cita.fecha]
  static final fecha = QueryIntegerProperty<Cita>(_entities[0].properties[3]);
}

/// [Consulta] entity fields to define ObjectBox queries.
class Consulta_ {
  /// see [Consulta.id]
  static final id = QueryIntegerProperty<Consulta>(_entities[1].properties[0]);

  /// see [Consulta.motivo]
  static final motivo =
      QueryStringProperty<Consulta>(_entities[1].properties[1]);

  /// see [Consulta.efermedadActual]
  static final efermedadActual =
      QueryStringProperty<Consulta>(_entities[1].properties[2]);

  /// see [Consulta.diganostico]
  static final diganostico =
      QueryStringProperty<Consulta>(_entities[1].properties[3]);

  /// see [Consulta.indicaciones]
  static final indicaciones =
      QueryStringProperty<Consulta>(_entities[1].properties[4]);

  /// see [Consulta.tratamiento]
  static final tratamiento =
      QueryStringVectorProperty<Consulta>(_entities[1].properties[5]);

  /// see [Consulta.paciente]
  static final paciente =
      QueryRelationToOne<Consulta, Paciente>(_entities[1].properties[6]);

  /// see [Consulta.fecha]
  static final fecha =
      QueryIntegerProperty<Consulta>(_entities[1].properties[7]);
}

/// [Paciente] entity fields to define ObjectBox queries.
class Paciente_ {
  /// see [Paciente.id]
  static final id = QueryIntegerProperty<Paciente>(_entities[2].properties[0]);

  /// see [Paciente.nombre]
  static final nombre =
      QueryStringProperty<Paciente>(_entities[2].properties[1]);

  /// see [Paciente.apellido]
  static final apellido =
      QueryStringProperty<Paciente>(_entities[2].properties[2]);

  /// see [Paciente.telefono]
  static final telefono =
      QueryStringProperty<Paciente>(_entities[2].properties[3]);

  /// see [Paciente.direccion]
  static final direccion =
      QueryStringProperty<Paciente>(_entities[2].properties[4]);

  /// see [Paciente.sexo]
  static final sexo = QueryStringProperty<Paciente>(_entities[2].properties[5]);

  /// see [Paciente.ocupacion]
  static final ocupacion =
      QueryStringProperty<Paciente>(_entities[2].properties[6]);

  /// see [Paciente.cedula]
  static final cedula =
      QueryIntegerProperty<Paciente>(_entities[2].properties[7]);

  /// see [Paciente.fechaNacimiento]
  static final fechaNacimiento =
      QueryIntegerProperty<Paciente>(_entities[2].properties[8]);
}
